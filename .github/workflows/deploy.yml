# .github/workflows/deploy.yml
name: Deploy to Raspberry Pi
on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: jordanellis73/eggbot/api
  IMAGE_NAME_UI: jordanellis73/eggbot/ui

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      ui-changed: ${{ steps.changes.outputs.ui }}
      compose-changed: ${{ steps.changes.outputs.compose }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check for changes
      id: changes
      run: |
        # Check if API files changed
        if git diff --name-only HEAD~1 HEAD | grep -E "^api/"; then
          echo "api=true" >> $GITHUB_OUTPUT
        else
          echo "api=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if UI files changed
        if git diff --name-only HEAD~1 HEAD | grep -E "^ui/"; then
          echo "ui=true" >> $GITHUB_OUTPUT
        else
          echo "ui=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if only docker-compose.yml changed
        if git diff --name-only HEAD~1 HEAD | grep -E "^docker-compose\.yml$|^compose\.yml$"; then
          echo "compose=true" >> $GITHUB_OUTPUT
        else
          echo "compose=false" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.api-changed == 'true' || needs.check-changes.outputs.ui-changed == 'true'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push API image
      if: needs.check-changes.outputs.api-changed == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ./api
        platforms: linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push UI image
      if: needs.check-changes.outputs.ui-changed == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ./ui
        platforms: linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_UI }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_UI }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: self-hosted  # This will run on your Pi
    needs: [check-changes, build-and-push]
    # Run if images were built OR if only compose files changed
    if: always() && (needs.build-and-push.result == 'success' || (needs.build-and-push.result == 'skipped' && needs.check-changes.outputs.compose-changed == 'true'))
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Login to GitHub Container Registry
      if: needs.build-and-push.result == 'success'
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
    - name: Pull latest images
      if: needs.build-and-push.result == 'success'
      run: docker compose pull
      
    - name: Deploy containers
      run: |
        # Stop and remove old containers
        docker compose down
        
        # Start with new images (or existing ones if no rebuild)
        docker compose up -d
        
        # Only clean up if we pushed new images
        if [ "${{ needs.build-and-push.result }}" == "success" ]; then
          docker image prune -af
        fi
