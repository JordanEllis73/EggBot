services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.pi-native
    restart: unless-stopped
    volumes:
      - /dev/i2c-1:/dev/i2c-1  # I2C device access
      - /dev/gpiomem:/dev/gpiomem  # GPIO memory access
      - /dev/bus/usb:/dev/bus/usb  # USB device access
      - api_data:/app/data
      - /run/dbus:/run/dbus:rw
      - /var/run/dbus:/var/run/dbus:rw
      - /sys/class/bluetooth:/sys/class/bluetooth:rw  # Bluetooth system access
      - /sys/kernel/debug:/sys/kernel/debug:rw  # Bluetooth debugging
    devices:
      - "/dev/i2c-1:/dev/i2c-1"
      - "/dev/gpiomem:/dev/gpiomem"
    privileged: true  # Required for GPIO access
    ports:
      - "8000:8000"
    networks:
      - app-network
    group_add:
      - "994"  # i2c group GID from host
      - "993"  # gpio group GID from host
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
      - NET_RAW
      - NET_BIND_SERVICE
      - SYS_PTRACE  # Required for Bluetooth debugging
    environment:
      - SIMULATE=false
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - BLINKA_FORCEBOARD=RASPBERRY_PI_4B  # Force Pi platform detection
      - BLINKA_FORCECHIP=BCM2711  # Force Pi chip detection
      - BLINKA_FORCEI2C=1  # Force I2C bus selection
      - BLINKA_SKIP_BOARD_DETECTION=1  # Skip automatic board detection
    depends_on:
      - pigpiod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  pigpiod:
    image: debian:bullseye-slim
    container_name: pigpiod
    restart: unless-stopped
    privileged: true
    volumes:
      - /dev:/dev
      - /sys:/sys
      - /run/udev:/run/udev:ro  # Access to udev for device information
    ports:
      - "8888:8888"  # Expose pigpio daemon port
    command: >
      bash -c "
        set -e &&
        echo 'Installing pigpio daemon...' &&
        apt-get update &&
        apt-get install -y wget unzip gcc make procps netcat-openbsd &&
        wget https://github.com/joan2937/pigpio/archive/master.zip &&
        unzip master.zip &&
        cd pigpio-master &&
        make &&
        make install &&
        cd .. &&
        rm -rf pigpio-master master.zip &&
        echo 'Setting up GPIO permissions...' &&
        chmod 666 /dev/gpiomem 2>/dev/null || echo 'gpiomem not available, continuing...' &&
        echo 'Creating pigpio startup validation script...' &&
        cat > /usr/local/bin/validate_pigpio.sh << 'EOF'
#!/bin/bash
echo 'Validating pigpio daemon startup...'
for i in {1..30}; do
    if pgrep pigpiod > /dev/null && nc -z localhost 8888; then
        echo 'pigpio daemon is running and listening on port 8888'
        # Test basic pigpio commands
        if echo 'HWVER' | nc -w 2 localhost 8888 | grep -q '^[0-9]'; then
            echo 'pigpio daemon responding to commands correctly'
            exit 0
        else
            echo 'pigpio daemon not responding to commands properly'
        fi
    fi
    echo \"Attempt \$i/30: pigpio daemon not ready, waiting...\"
    sleep 2
done
echo 'pigpio daemon failed to start properly'
exit 1
EOF
        chmod +x /usr/local/bin/validate_pigpio.sh &&
        echo 'Starting pigpio daemon with enhanced configuration...' &&
        echo 'Configuration: -g (allow remote GPIO), -v (verbose), -x (disable alerts), -p 8888 (port), -f (foreground), -t 0 (no clock tick), -k (keep alive)' &&
        pigpiod -g -v -x -1 -p 8888 -f -t 0 -k &
        PIGPIO_PID=\$! &&
        echo \"pigpio daemon started with PID \$PIGPIO_PID\" &&
        /usr/local/bin/validate_pigpio.sh &&
        echo 'pigpio daemon validated successfully, keeping container running...' &&
        wait \$PIGPIO_PID
      "
    healthcheck:
      test: ["CMD", "sh", "-c", "pgrep pigpiod && nc -z localhost 8888"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 45s
    networks:
      - app-network
    environment:
      - PIGPIO_ADDR=0.0.0.0  # Listen on all interfaces
      - PIGPIO_PORT=8888

  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=http://192.168.1.194:8000
    networks:
      - app-network
    depends_on:
      - api

volumes:
  api_data:
    
networks:
  app-network:
    driver: bridge
